

Approach
Trick : We just need to check if the 2's power are present in the array or not.

Why so ?

let's observe few example :
5 (101) is only possible if we have 100 + 1, that is 4 & 1 present
6 (110) is only possible if we have 100 + 10, that is 4 & 2 present
We can see that, the number is possible if all 2's power lower to it present then its possible.

1,2 present then 1- 3 any number possible
1,2,4 present then 1 - 7 any number can be possible
1,2,4,8 present then 1-15 any number can be possible

In other word only 2's power are not possible to form unless it is present in the array.
So we look for the smallest 2's power that is not present in the array, ans return it as answer.

This can be done in multiple ways.
Here I have added two solutions one is space optimized and other one is time optimized.



class Solution {
public:
    int minImpossibleOR(vector<int>& nums) {
        
        int ans=1;
        
        unordered_map<int,int>mp;
        
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        
        while(1){
            if(mp.find(ans)==mp.end()) return ans;
            ans=ans*2;
        }
        
        return 1;
        
    }
};
